@page "/pages/{*path}"
@using Wherlog.Helpers
@using Wherlog.Models
@using Wherlog.Models.Page
@inject NavigationManager Navigation

@if (pageModel == null)
{
    <PageTitle>Page</PageTitle>
    <h1>Page</h1>

    @if (HasPath)
    {
        <FluentProgressRing />
    }
    else if (pages != null)
    {
        <FluentStack Orientation="Orientation.Vertical">
            @foreach (PageModel model in pages)
            {
                <FluentCard @onclick="() => OnClick(model.Url)">
                    <h4>@model.Title</h4>
                </FluentCard>
            }
        </FluentStack>
    }
}
else
{
    <PageTitle>@pageModel.Title</PageTitle>

    <div class="main-inner">
        <h1 class="post-title">@pageModel.Title</h1>
        <MarkdownSection Content="@((pageModel as IRaw).GetContent())" />
        @if (Path == "api")
        {
            <style>
                hgroup.main {
                    display: unset;
                }
            </style>
        }
    </div>
}

@code
{
    private RequestHelper request = RequestHelper.Default;
    private PageDetailModel pageModel;
    private PagesModel pages;

    private bool HasPath => !string.IsNullOrEmpty(Path);

    [Parameter]
    public string Path { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        pages ??= await request.GetPagesAsync().GetResults();

        pageModel = null;
        if (HasPath)
        {
            if (Array.Find(pages, x => x.Url.Replace("/index.html", string.Empty).TrimStart('/').Contains(Path)) is PageModel page)
            {
                pageModel = await request.GetAsync(page.Api, SourceGenerationContext.Default.EntryPageDetailModel).GetResults();
            }
            else
            {
                Navigation.NavigateTo("pages");
            }
        }
    }
    
    private void OnClick(string path)
    {
        Navigation.NavigateTo($"pages/{path}");
    }
}
