@page "/categories/{slug?}"
@using Wherlog.Helpers
@using Wherlog.Models.Cate
@using Wherlog.Models.Post
@inject NavigationManager Navigation

@if (cate == null)
{
    <PageTitle>Category</PageTitle>
    <h1>Category</h1>

    @if (!HasSlug && cates != null)
    {
        <FluentGrid Spacing="1">
            @foreach (var cate in cates)
            {
                <FluentGridItem xs="6" sm="3">
                    <FluentCard @onclick="() => OnClick(cate.Slug)">
                        <h4>@cate.Name</h4>
                    </FluentCard>
                </FluentGridItem>
            }
        </FluentGrid>
    }
    else
    {
        <FluentProgressRing />
    }
}
else
{
    <PageTitle>Category: @cate.Info.Name</PageTitle>
    <h1>Category: @cate.Info.Name</h1>

    <FluentStack Orientation="Orientation.Vertical">
        @foreach (PostModel post in cate.Posts)
        {
            <FluentCard>
                <PostCard Post="@post" />
            </FluentCard>
        }
    </FluentStack>
}

@code
{
    private RequestHelper request = RequestHelper.Default;
    private static CatesModel cates;
    private CateDetailModel cate;

    private bool HasSlug => !string.IsNullOrEmpty(Slug);

    [Parameter]
    public string Slug { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (HasSlug)
        {
            if (Array.Find(cates, x => x.Slug.Equals(Slug, StringComparison.OrdinalIgnoreCase) || x.Name.Equals(Slug, StringComparison.OrdinalIgnoreCase)) is CateIndexModel cateIndex)
            {
                cate = await request.GetAsync(cateIndex.Api, SourceGenerationContext.Default.EntryCateDetailModel).GetResults();
            }
            else
            {
                Navigation.NavigateTo($"categories");
            }
        }
        else
        {
            cate = null;
            cates ??= await request.GetCatesAsync(CateType.Category).GetResults();
        }
    }

    private void OnClick(string path) => Navigation.NavigateTo($"categories/{path}");
}
