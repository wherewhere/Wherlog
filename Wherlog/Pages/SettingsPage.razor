@page "/settings"
@using System.Globalization
@using Wherlog.Helpers
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<SettingsPage> Loc
@inject NavigationManager Navigation

<FluentDesignTheme @bind-Mode="@mode" StorageName="theme" />

<PageTitle>@Loc["TitleText"]</PageTitle>
<h1>@Loc["TitleText"]</h1>

<FluentStack Orientation="Orientation.Vertical">
    <div style="width: 100%;">
        <h4>Theme</h4>
        <SettingsCard>
            <Icon>
                <FluentIcon Value="new Icons.Regular.Size20.Color()" />
            </Icon>
            <Header>App Theme</Header>
            <Description>Set the theme of this App.</Description>
            <ActionContent>
                <FluentSelect
                    Width="auto"
                    Items="@(Enum.GetValues<DesignThemeModes>())"
                    @bind-SelectedOption="@mode" />
            </ActionContent>
        </SettingsCard>
    </div>

    <div style="width: 100%;">
        <h4>Language</h4>
        <SettingsCard>
            <Icon>
                <FluentIcon Value="new Icons.Regular.Size20.LocalLanguage()" />
            </Icon>
            <Header>Language</Header>
            <Description>Select language and restart to change language.</Description>
            <ActionContent>
                <FluentSelect
                    Width="auto"
                    Items="@LanguageHelper.SupportCultures"
                    @bind-SelectedOption="SelectedLanguage">
                    <OptionTemplate>
                        @context.DisplayName
                    </OptionTemplate>
                </FluentSelect>
            </ActionContent>
        </SettingsCard>
    </div>

    <div style="width: 100%;">
        <h4>Others</h4>
        <SettingsCard>
            <Icon>
                <FluentIcon Value="new Icons.Regular.Size20.Navigation()" />
            </Icon>
            <Header>Navigate</Header>
            <Description>Navigate to target url.</Description>
            <ActionContent>
                <FluentStack Width="var(--settings-card-content-min-width)">
                    <FluentTextField Placeholder="输入 URL" @bind-Value="path" />
                    <FluentButton OnClick="@(() => Navigation.NavigateTo(path ?? string.Empty))">前往</FluentButton>
                </FluentStack>
            </ActionContent>
        </SettingsCard>
    </div>

    <div style="width: 100%;">
        <h4>Others</h4>
        <SettingsCard>
            <Icon>
                <FluentIcon Value="new Icons.Regular.Size20.ArrowReset()" />
            </Icon>
            <Header>Reset application</Header>
            <Description>Reset settings of this application.</Description>
            <ActionContent>
                <FluentButton OnClick="ResetAsync">
                    Reset
                </FluentButton>
            </ActionContent>
        </SettingsCard>
    </div>
</FluentStack>

@code
{
    private DesignThemeModes mode;
    private string path;

    private CultureInfo culture;
    private CultureInfo SelectedLanguage
    {
        get => culture;
        set
        {
            if (culture != value)
            {
                culture = value;
                _ = SetLanguageAsync(value);
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        string lang = await App.SettingsHelper.GetAsync<string>(SettingsHelper.CurrentLanguage);
        if (lang == LanguageHelper.AutoLanguageCode)
        {
            lang = LanguageHelper.GetCurrentLanguage();
        }
        culture = new CultureInfo(lang);
    }

    private async Task SetLanguageAsync(CultureInfo culture)
    {
        if (culture?.Name.Equals(await LanguageHelper.GetLanguageCodeAsync(JSRuntime), StringComparison.OrdinalIgnoreCase) == false)
        {
            CultureInfo.DefaultThreadCurrentUICulture = CultureInfo.DefaultThreadCurrentCulture = culture;
            await App.SettingsHelper.SetAsync(SettingsHelper.CurrentLanguage, culture.Name);
            await LanguageHelper.SetLanguageCodeAsync(LanguageHelper.GetCurrentLanguage().ToLowerInvariant(), JSRuntime);
        }
    }

    private async Task ResetAsync()
    {
        await App.SettingsHelper.ResetAsync();
        await App.SettingsHelper.SetDefaultSettingsAsync();
    }
}
